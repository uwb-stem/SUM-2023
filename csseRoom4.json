{
    "csse": [
        {
            "time": "1:00 PM - 1:15 PM",
            "projectId": "csse-4-100",
            "title": "Lavner Education IT Intern ",
            "studentName": "Jess Hathcock ",
            "studentMajor": "CSSE",
            "projectType": "Sponsored internship or job opportunity",
            "facultyAdvisor": "Dr. Kelvin Sung",
            "posterLink": "posters/csse/hathcockjess_LATE_3828427_108498185_Poster.png",
            "abstract" : "My capstone project was spent interning with Lavner Education as an IT Intern. My primary responsibilities include: instructing various STEM or creative courses, managing inventory, and providing technical support to students. The classes offered by Lavner consisted of kids ages 6 to 14 years old, with most class sizes limited to between four to eleven kids.  Most of my time was spent at Seattle University, but occasionally I was assigned to the University of Washington campus  instead./n/nMost of the issues that I encountered during the internship stemmed from a lack of experience in teaching children. A common problem was trying to figure out how to convey a topic in a way an 8-year-old could understand. Some students also had behavioral issues or outside distractions disrupting the class.\n\n As the weeks went on it became easier to teach, especially on courses I was assigned multiple times (such as Video Production or Graphic Design). Many students were able to understand more complex topics if given a demonstration or comparison to something they were familiar with. Regarding distractions, most students found it helpful to be momentarily moved to a quieter area to get their work done. For difficult cases, such as students repeatedly causing distractions, onsite directors were able to take over the situation so I could help the remaining students. For larger class sizes, other interns were available to assist throughout the week. \n\nAll courses had projects with results that the students could take home at the end of the week. All kids who completed the camp were able to successfully take home the results from their projects (Such as videos, drawings, games, programs, etc.). \n\nI found material learned from courses such as CSS 301: Technical Writing, CSS 310: Information Assurance and Cybersecurity, and CSS 350: Management Principles to be useful during the internship. CSS 301 covered how to convey technical information to different audiences, which was helpful when teaching children. Social engineering and computer safety topics covered in CSS 310 were relevant when teaching kids about online safety. CSS 350 also provided information regarding different management styles and team dynamics, which made it easier to adapt to different situations.\n\nThroughout my internship, I gained a better understanding of how to assist others, learned a variety of software, improved communication skills, and gained management skills. "
        },
        {
            "time": "1:15 PM - 1:30 PM",
            "projectId": "csse-4-115",
            "title": "Overtime-Solicitation Project",
            "studentName": "Clement Jeremie Gomiero",
            "studentMajor": "CSSE",
            "projectType": "Sponsored internship or job opportunity",
            "facultyAdvisor": "Dr. Kelvin Sung",
            "posterLink": "posters/csse/gomieroclementjeremie_3935503_108488032_Clement Gomiero - Poster-2.png",
           "abstract":"My Capstone project took place at Kaiser Aluminum, a prominent player in the US aluminum product industry, promoting excellence across various sectors including Aerospace, automotive, general engineering, packaging, and defense. Kaiser Aluminum is composed of 14 facilities mainly located in the US. Trentwood plant in Spokane WA is where I did my internship. \n\nThe plant operates 24/7. To maintain uninterrupted production, it had to ensure swift replacements for any absent employees. This task is executed manually, necessitating individual calls to secure replacements. This manual approach is not only time-consuming but also prone to errors, leading to budget loss. \n\nThis is where my project came into play, aiming to mitigate human errors and streamline the process, thus freeing up valuable human resources for more impactful projects. The core objective of my project was to develop a cloud-based application utilizing power apps, enabling the seamless solicitation of employees for overtime work. Moreover, the application featured an automated calling function to efficiently inquire about their availability.\n\nUtilizing cloud technology, I chose to implement my application using power apps due to its capacity to develop applications with secure connections to on-premise databases. Twilio was the facilitating calling function, a cloud-based service used for making calls from the cloud. This design choice was driven by the fact that if the application was on-premise, Twilio could make calls but would face restrictions on sending data back due to firewall safety concerns. For call programming, I used Azure functions, a serverless function capable of execution from the cloud.\n\n To manage call list priorities, I used a dataset including employee details like names, phones, seniority, roles, secondary roles, charges, and shifts. Based on these data, the application determined eligibility for overtime. Following eligibility assessment, a sorting occurred based on Primary Jobs, Charges, Seniority, and secondary jobs to establish the order. Subsequently, an automated call was made to the employee, offering the option to accept or decline overtime.\n\n To achieve my goals, I received amazing support and help from my coworkers who shared with me their experience and knowledge by showing how to tackle problems/bugs, technical difficulties, and handling meetings. \n\nPresently, my application shadows with the manual process, serving as a parallel solution to validate its accuracy. The validation phase of all the functionalities is currently in process. The final implementation is planned to be done by the end of this month.  "
        },
        {
            "time": "1:30 PM - 2:00 PM",
            "projectId": "csse-4-130",
            "title": "Spring Tactics",
            "studentName": "Kobe Kamin\n\nJacob Lee Tea",
            "studentMajor": "CSSE\n\nCSSE",
            "projectType": "Group Project - Student Defined",
            "facultyAdvisor": "Dr. Kelvin Sung",
            "posterLink": "posters/csse/kaminkobe_4047857_108492476_Poster1.png\n\nposters/csse/teajacoblee_3943701_108492475_Poster2.png",
            "abstract": "Kobe Kamin\nMy partner and I began our capstone with a turn-based single player strategy game we’d built prior. The game was simple, lacking basics such as animation or sound. My primary goal for this capstone project was to learn new skills related to networking, and practice game development techniques such as rapid prototyping and code reengineering. This was accomplished through reengineering our game from a single player to multiplayer experience in addition to making it a more complete product. This was done using Unity, Unity Netcode for Game Objects, Unity Relay, and Itch.io as a publisher.\n\nThe most difficult issue I faced was that of player connectivity and, more significantly, synchronizing game states for players across a network. Another big problem was getting game balance, readability, and usability up to a high standard. As developers who both knew the game’s design in and out, my partner and I were unequipped to properly address these issues from a consumer standpoint.\n\nThe first problem addressed, player connectivity, was accomplished by leveraging Unity’s Netcode for Game Objects and Unity Relay. Netcode for Game Objects along with Unity Transport allowed us to send information to connected players. This solution alone was insufficient though, as we could only connect port forwarded players. This need was circumvented through Unity Relay which, as a server, acts as an intermediary between connected players, negating the need for direct connection. The issue of game state synchronization was handled through remote procedure calls. With ServerRPCs, we could execute integral game code consistently and securely then relay data back to users via Client RPCs. The final problem, entirely consumer oriented, was addressed through frequent and regular playtests with three other capstone teams.\n\nOur project met all goals, resulting in a fully ported, playable, and standalone multiplayer game published on Itch.io. Porting a single-player game to multiplayer involved extensive refactoring, addressing the learning goal Process Reengineering Techniques. The goal of Network Design was heavily necessary during this porting process and beyond. Finally, Rapid Prototyping was practiced throughout the quarter by preparing for weekly meetings and iterating based on playtester feedback.\n\nOur main difficulties were all growing pains from learning new skills and thus there are no major pitfalls I’d try to avoid if I were to do this capstone over. Given more time I think we’d focus mainly on improvements suggested by our fantastic playtesters and squashing a few persistent bugs.\n\n\nJacob Tea\nFor our capstone, my partner and I reengineered a single player game we built into a multiplayer experience. At the start of the summer, it was only playable in single player with a rudimentary AI. In addition, the game also had no animation or audio which hurt the gameplay. Adding multiplayer and beautifying the game was done using Unity, Unity Netcode for Game Objects, Unity Relay, and Itch.io. My primary aim for this capstone project was the learning of new skills related to network design, graphical design, and testing methodologies.\n\nOne problem that I needed to overcome was connecting and synchronizing player data so that the game state was relayed accurately throughout the game. Another problem I needed to work out was designing a GUI that presented game information in a clear and concise manner. A third unexpected problem was developing balanced and visually appealing maps for players to experience.\n\n To address the hurdle of connecting both players, our solution was to use Unity’s Netcode for Game Objects to transport data between players. Unity Relay allowed us to designate player one as a host in order to eliminate the need for a dedicated server. Unity Relay also allowed us to establish player connections without them having to configure settings themselves. To handle GUI issues, we utilized our own playtests and capstone group playtesting sessions to address issues concerning our design. To create entertaining maps, our approach involved referencing maps from other games in our genre. One issue that this presented was the asymmetric design of our reference maps which favored one side and made for poor game balance. Our solution to this was to split resources evenly and on a per map basis, ensuring that both spawns were positioned equitably. To further balance we tested and iterated on each map in multiple playtests.\n\nThis project achieved all objectives outlined in my contract. The current version of the project allows two players to connect and play each other online in a turn-based strategy game while maintaining a consistent game state. According to our play testers, the current maps are more balanced and visually interesting than our original maps. Finally, the game is published and available on Itch.io for anyone to play.\n\nFor my next steps I would consider reactivating our deprecated single player mode. Another step I’d consider would be working out some persistent multiplayer problems involving connecting and loading. "
        },
        {
            "time": "2:00 PM - 2:30 PM",
            "projectId": "csse-4-200",
            "title": "WildScapes: Multiplayer Networking System",
            "studentName": "Jino Cho Chai\n\nAlicia Taing\n\nJason Nguyen",
            "studentMajor": "CSSE\n\nCSSE\n\nCSSE\n\n",
            "projectType": "Group Project - Student Defined",
            "facultyAdvisor": "Dr. Kelvin Sung",
            "posterLink": "posters/csse/nguyenjason_3774704_108494367_Sleepy Bread Poster 1.jpg\n\nposters/csse/chaijinocho_3945253_108494862_Poster - Jino Chai.png\n\nposters/csse/taingaliciameili_3790462_108494699_Sleepy Bread Poster 3.png",
            "abstract": "Jino Chai \nFor my capstone project, I wished to do something that I felt would not only be something that was of close interest to me, but additionally something that may be of value to understand for the specific field I will be going into. Because of those reasons, I chose to work on a video game that would support multiple players across a network, specifically up to four, and to understand what went behind making a program that would display simultaneously across the machine of all users. Additionally, I worked in a group of three in order to emulate working in a team and reinforcing other concepts of working in a team that my classes had already taught me.\n\nAs such, a majority of our efforts went into making sure that our game was synchronised for all the players, as the type of game we chose to make required all players to be updated real-time of what was currently happening in the game. This specifically proved to be a great challenge, and was personally the most difficult problem that we tackled on this project. Anytime a networking problem occurred, we had to differentiate whether it was a physical limitation on the engine we chose for our networking system, or due to our minimal prior experience with networking and a lack of in-depth documentation for the engine.\n\nIn order to solve such problems, we had to focus on isolating individual components of our game and making sure that specific component performed well before moving onto the next. Initially, our project consisted merely of prototypes of the different components to ensure that if any problems did arise, we could tackle it individually. This ensured that we knew what the problems were beforehand and exactly where it was from. From there, we could determine if it was a limitation and how to mitigate it for player experience, or a coding error on our part.\n\nIn the end, I learned how difficult it is to synchronise multiple machines across a network, but still also create a successful video game that ensures that these networking problems do not negatively impact the players. It also taught me much about the different stages of creating a video game, and how to improve on it based on feedback.\n\n\nAlicia Taing\nIn this project, my team and I worked on creating a game-like system. We approached the project as a game-like system with the intent to focus on what we wanted to learn. \n\nSpecifically in my case, I set out to learn more about networking difficulties and decisions involving latency and non-local synchronous gameplay for a multiplayer networking system supporting 1-4 players at once. I also wanted to develop advanced skills with data structures and object oriented programming in an extensive system. As well as understand and apply software development principles with focus on deployment on an established platform and maintenance after the fact.\n\nIn order to achieve what I wanted to learn, we found that creating a game-like application would be a suitable solution. In the application we created, I was able to apply and practice networking in building a multiplayer system. I was also able to practice with data structures by building an extensive inventory and crafting system into the application. \n\nThe goal of what I set out to learn was achieved through the building of the game-like system. While the application was not as polished and robust as we first aimed to have, my individual goals were met as I learned very much from practicing building the systems for the application. The overall goal our team wanted to achieve with building the application was to provide a multiplayer experience for people to connect over the internet in order to promote human connection. This experience that we crafted, while it has many kinks to iron out, is one that we witnessed bring people together as they played.\n\nWhen I first set out on this project, I outlined how I would know if I accomplished my goals. While some goals such as the intent to practice deploying our application and maintaining it thus after the fact fell to the wayside, I believe that the majority of the other goals involving learning were accomplished. We were able to create a multiplayer experience that delivered on complex systems in which users could interact with each other and their own private systems and I was able to learn a lot in terms of networking, game design, and building bigger systems.\n\n\n"
        },
        {
            "time": "2:30 PM - 3:00 PM",
            "projectId": "csse-4-230",
            "title": "MechaPunk Fury",
            "studentName": "Elygh Kosmos Thao\n\nVincent Allen\n\nBrandon Jackson",
            "studentMajor": "CSSE\n\nCSSE\n\nCSSE",
            "projectType": "Group Project - Student Defined",
            "facultyAdvisor": "Dr. Kelvin Sung",
            "posterLink": "posters/csse/thaoelygh_3893227_108491638_Poster_Elygh_Thao-1.png\n\nposters/csse/allenvincent_3948523_108492358_CapstonePoster_VincentAllen.png\n\nposters/csse/jacksonbrandon_4201865_108493450_Project Results Poster - Brandon Jackson-1.png",
             "abstract": "Elygh Thao\nMechaPunk Fury is a 2D single-player ‘Beat-em-up’ video game developed by a team of me and 3 other developers using the Unity game engine. The main objective behind this game’s development was to learn new specific skills/concepts applicable to the game development industry and apply them to our own experiences and resume.\n\nOne of my main learning goals for this project was to take a deeper dive into the creation and application process of the digital art side of video games. This task proved to be difficult due to inexperience but I soon found help by conducting multiple deep dives into the creation space already set by big gaming companies. By emulating their processes and tools usage, I was able to make significant progress in my work from the early development stages of pencil sketches all the way to animating lifelike movement. Applying the knowledge gained from notable gaming companies resulted in a game with digitized custom characters paired with specifically animated movement.\n\nThe other big goal I set to learn about was how to effectively conduct and learn from player feedback. While this mostly pertains to the later stages of development, the overall effect on design from feedback proved to be much more significant and direction changing than I had originally anticipated. Much of the feedback may have been unnecessarily harsh at first glance, but objectively analyzing the feedback and understanding the roots behind each statement led to a clearer understanding of what our game needed to deliver. The purpose of an application being created should always fit what the user wants, however the balance between the user’s wants, needs, and actual actions is what my team analyzed and modified the satisfaction level to meet. By doing this, our game was able to satisfy all players and not just a selected group.\n\nOver the course of 8 weeks this game was created successfully from scratch thanks to a multitude of factors including following a Scrum based development flow, regular work meetings, genuine feedback from playtesting, and free communication within our team. The final deliverable consisted of a fully developed game featuring an addicting combat system, original custom characters, intuitive level design, and a fierce enemy ai system.\n\nVincent Allen\nFor our capstone project we made a game called MechaPunk Fury, a beat-em up style game that Abdul Naveed, Brandon Jackson, Elygh Thao, and I developed. My goals for this project were to understand and implement various types of shaders and graphics programming techniques, understand the underlying mechanics behind the beat-em up genre such as state machines and animation canceling, and apply Agile software development techniques such as Scrum, Kanban, or other methodologies.\n\nA particular issue of note during our capstone was balancing the combat between our player and the enemies. Through our survey results during playtesting, we received lots of complaints about various exploits or enemies being too hard. A specific frustration we heard during feedback was that in certain situations, the player could be stunlocked by the enemies, often forcing the player to restart. The solution to our issue with combat was a mix of playtesting feedback and non-destructive combat adjustments. Particularly, we designed the combat to be adjustable dynamically, meaning we could make changes without having to change the code directly. The dynamic nature of our implementation gave us fast turnaround times on our adjustments, allowing for productive daily standups, and more time for large feature additions.\n\nOne of the major goals I personally had was to make my own custom VFX and Shaders for our game, which I managed to accomplish to varying degrees. For instance, I implemented my own health and stamina bar system which used signed distance fields to make clean in-game UI. Additionally, I custom made several VFX that contributed to combat feel, such as a smack effect that animates when you damage the enemy, and a screenshake effect that emphasized impact. One VFX I had difficulty with was a ripple post effect that distorted the background when the player or enemy hit someone. Unfortunately I did not have time to complete this feature, but the failure in getting this implemented gave me a broader understanding of how postFX work compared to other forms of VFX.\n\nThis project is significant because it provides my team and I with valuable experience in cooperative game development. Through this cooperative experience, we got hands-on with specific parts of the development process, such as VFX, gameplay programming, design, and more. Overall, all of our work culminated in a satisfying and engaging beat-em up style game that we’re proud to present.\n\nBrandon Jackson\nMy name is Brandon Jackson. In this CSS Capstone project, between June 18 and August 11, my teammates and I used the Unity game engine to develop a beat-em-up style game called MechaPunk Fury. We combined our different skills in developing different aspects of it. Then we put all of our individual pieces together into a working build, which was then play tested by our peers to receive feedback for further improvement on our game.\n\nThere were problems during the project. Early on, we did not know each other very well, so we needed time to understand what we could each contribute to the project and to adjust to each other’s schedules. Developing the game itself was not without issues, either. Due to us splitting up the work, our individual problems depended on what we were each doing. For me, I designed the levels in which the player traverses and the obstacles they contain. I was thus faced with making sure the levels provided a good, steadily increasing challenge without being frustrating, or without being a detriment to the combat aspects of the game that my teammates were developing.\n\nMy solution was to first sketch out the levels before implementing them. That way, I could get an initial idea of what the levels would look like, and I could easily revise it. From there, I had a base to work off of, and thus it was much easier to build the designs in game, followed by adjustments to object and enemy placements as appropriate.\n\nWith feedback from my teammates and our play testers, my levels eventually reached a desirable level of challenge and creativity, mixing together the combat system and obstacle design into an enjoyable experience. I feel this helped us successfully achieve our goal of a playable, functional game, and then some.\n\nFrom this project, I learned and refined new skills in how to develop a video game, especially in terms of level design. I also improved my ability to communicate and work with others, as previously I typically worked on similar projects by myself. And through the use of an online organizational tool called Trello, I learned how to use available resources to make completing tasks both small and large much easier. All of these skills will prove very useful as I take on more projects in a future career and beyond."
        },
        {
            "time": "3:00 PM - 3:45 PM",
            "projectId": "csse-4-300",
            "title": "Dive: Playtesting Cycle",
            "studentName": "Po-Lin Tu\n\nMikhail Ermolenko\n\nPavel Peev\n\nJustin Seo\n\nDavion Li",
            "studentMajor": "CSSE\n\nCSSE\n\nCSSE\n\nCSSE\n\nCSSE",
            "projectType": "Group Project - Student Defined",
            "facultyAdvisor": "Dr Kelvin Sung",
            "posterLink": "posters/csse/tupolin_4199584_108494138_Polin_ColloquiumPoster_1.jpg\n\nposters/csse/ermolenkomikhail_4171706_108493972_Mikhail__Poster3.pptx.png\n\nposters/csse/peevpavel_4117010_108494155_Pavel_ColloquimPoster.png\n\nposters/csse/seojustin_3933311_108491719_Justin_Poster4.png\n\nposters/csse/lidavion_3946914_108494013_Davion_Poster-5-1.png",
            "abstract" : "Po-Lin Tu\nFor my capstone, I worked in a team of five to develop a 2D video game featuring underwater horror and exploration. For me, the primary purpose of our capstone project was to learn about  how to build a fun video game, how to implement the behaviors of the enemies in the video game, and how to incorporate tools powered by AI into the development life cycles of the video game. Overally, the result of our capstone project is a video game that has gone through three playtest sessions and has two maps for the player to explore.\n\nTo build a fun video game, we knew that we should reference the video games that we liked. Thus, as we designed the mechanics for our own game, we often used the other video games, such as Rain World and Subnautica, as references to figure out whether a mechanic could be fun for the players. It was immensely important, as Professor Kelvin Sung said, to verify whether the video game could in fact be fun from the players’ perspective. As a result of this, Professor Kelvin Sung held three playtest sessions so that we could have people play our video game. We ended up adjusting things like character controls and level design to account for the feedback from the playtesters.\n\nTo implement the enemies in the game, we decided to use the A* pathfinding algorithm so that an enemy could find the optimal path to the main character. The reason why we chose this algorithm over the others was that this algorithm was more efficient and that there was an existing A* pathfinding project for Unity, the game engine that we used. Importing this project provided all the pathfinding functionality we needed, and we implemented four different enemy behaviors by extending from this pathfinding algorithm.\n\nTo develop a video game, we must have images for all the objects, including  the main character, the enemies, and the weapons, in the game. Nevertheless, creating all the images on our own was too time-consuming. We realized that this was where we could and should use tools powered by AI to speed up our development process. We eventually relied on a tool called Midjourney to generate all the visual elements in our game. Thanks to the help of this tool, we got enough time to finish and polish two different underwater maps.\n\n\nMikhail Ermolenko\nMy primary goal for this capstone project was to learn more about project planning and management. I mostly achieved this goal by creating a general project plan, setting up a schedule, and managing the project based on that plan. During the project, we changed our plans almost every week because we used many new technologies and it was hard to estimate the time some tasks would take.\n\nOne difficulty I faced was creating a project plan and schedule without a clear understanding of the technologies we would be using and how long they would take to implement. Throughout the project, we were constantly experimenting with AI, free assets, and new tools for Unity, and integrating these things into the game.\n\nI tackled this problem by making a general plan that covered everything we wanted in the game. After that, we assigned different parts of the project to team members. For example, all enemies and AI were assigned to one person. He researched technologies that could be used for them and implemented all creatures with AI. We also adjusted our plan weekly based on team members' progress. It gave us flexibility in approaching those ambiguous problems and increased our productivity as a team.\n\nOur project resulted in a fully developed game that works on both PC and Android and was published on Itch.io. This was a great experience for me. It helped me learn how to plan and manage a project with uncertain and changing requirements, and a lot of new technologies. I also gained experience adapting and designing games for two different platforms: PC and Android. Differences in controls and screen sizes affected how users interacted with the game, and adaptations were needed for these devices. Some things that worked perfectly on a PC didn't work on a smartphone. It was very beneficial for me to learn about these differences, receive feedback from playtesters, and make changes to the game based on that feedback.\n\nOne thing I would do differently if I had to do this capstone project again is ask team members for rough time estimates for their sprint tasks. In the beginning, we didn’t do this because many tasks seemed too ambiguous to estimate. However, I think it would have been helpful for us to estimate the time for tasks, as tasks often take as long as the time you give them.\n\n\nPavel Peevl\nFor our capstone, our team of 5 students decided to make a 2D underwater horror game that would run both on Windows and Android platforms. This allowed us to gain experience with the entire game development lifecycle and, more importantly, how to develop a game for public consumption. This project was also the perfect opportunity to explore the development of custom visual effects using shaders, as the game needed effective visual effects to convey both the underwater environment as well as the horror atmosphere.\n\nDuring development, we divided the game into individual tasks, and each week we decided on and distributed the tasks for that week. The project required a lot of communication, as there were a lot of independent systems that needed to work together. To this end, our team met three times a week, Monday for setting up tasks, Thursday for merging work, and Sunday for preparing our presentation to our sponsor.\n\nEven with our frequent meetings, careful thought had to be put in on how systems were organized so that the entire team could use them conveniently. This meant utilizing C#'s events so that our systems could communicate with each other without direct access to each other.\n\nOne of my most significant experiences during this project was learning how to use a profiler. At one point we discovered that the mobile version of our game was running less smoothly than it should. I decided to try and profile the game, which resulted in me finding out that one of our scripts was consuming tons of resources, which was promptly fixed. Had I not used the profiler, I doubt we would have found the problem, as nobody thought that script was using so many resources.\n\nAt the end, our project resulted in a working and fun game that could be played both on Windows and Android devices. We know we succeeded, as the feedback we received from our final playtest was quite positive and saw major improvements from our previous two playtests.\n\nIn conclusion, this project not only served as an experience working collaboratively in an agile team and going through the entire development process for a game, but also makes a great entry to my resume which will make it a lot easier to land a job in the entertainment industry.\n\n\nJustin Seo \nDuring the Summer Quarter, I worked on a collaborative game development project with four others. We felt as though it would be a valuable educational experience that would let us gain practical insights about the cycle of game development. And while most of us had previously taken 385, the Game Development course, we still felt there was a lot left to explore. On a personal level, I wanted to look into how Unity shaders worked, how to incorporate playtesting feedback, and how to keep track of documentation during development.\n\nBefore the quarter started, we decided on an initial game concept, and set up a sprint schedule, so we could begin work with a plan in mind. In our weekly meetings, we decided what needed to be done that week to make sufficient progress and divided tasks among ourselves as we saw fit, which we kept recorded in Sprint documents. And through this cycle, I was able to pursue my interests while working the game, without too much overhead complicating scheduling. \n\nThis process of development required a lot of independent learning, looking up tutorials and guides wherever personal knowledge fell short. And so, I learned a great deal about how Unity works, and gained experience working with its sound, shadergraphs, and animations, among other things. While coding, I documented what my code did by writing out descriptions of what they are and what they did within the code as well as in a word document in our group folder for better understandability.\n\nDuring the last several weeks, we, alongside three other Summer capstone game devs, conducted group playtesting where everyone would play each other’s games and give feedback on the experience. And through it, we gained a lot of valuable insights that we incorporated into our game, improving both the general gameplay and level design to make it more fun and enjoyable. \n\nAt the end of the iterative process, and especially due to the valuable playtesting weeks, we made a game that we could be proud of. And as a result of it, I gained knowledge and experience about how Unity operates, how to work in group development cycles, and how to run and incorporate results from playtesting. I hope to carry this knowledge with me forwards to better prepare myself my future career. \n\n\nDavion Li\nThis summer, four students and I decided to develop a game for our capstone project, a 2D underwater horror adventure game for PC and mobile devices. Before that, I was worried about the program. We only had about two months to develop a game from scratch, and to make matters worse I had never had game development experience. I had only taken a class on game engine development taught by Kelvin Sung. At the same time, we set big goals at the beginning. We wanted to develop seven levels, six types of enemies and three types of weapons.Later, in weekly meetings with teachers and other development groups, we realized that we needed to develop our goals in more detail by making them into tasks. this greatly helped us to manage our time by letting us know that the goals we had started with were not going to be accomplished, and we cut back on our goals.\n\nAnother challenge is that our game needs a lot of art materials, such as background images, decoration sprite, and enemy sprite. this will cost us a lot of labor and time. Luckily now generative AI helps us to solve this problem. We use ChatGPT to help us generate suitable prompts, and then input the prompts into MidJourney to generate images. We can generate a large number of images in a very short time and select the ones that meet our requirements among them.\n\nWhat impressed me most about the whole project was the design of the game UI especially for mobile. Our original design used two joysticks to control movement and aiming, and the player needed to aim and then click the fire button to attack. The controls were not smooth for mobile players. After the play test, we received feedback from players. We decided to merge the aim and attack buttons and optimized the movement system. We are very satisfied with the result.\n\nOverall, the results of this program exceeded my initial expectations and allayed my concerns. We had a really perfect team with members who encouraged and helped each other. Many thanks to Prof. Kelvin for his guidance and help, without him, our project might not have been completed as well as it was. This time we experienced the whole life cycle of a project, which will help me a lot in my future job search and in the industry."
        }
    ]
}

